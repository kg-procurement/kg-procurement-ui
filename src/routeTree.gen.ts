/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as VendorImport } from './routes/vendor'
import { Route as LoginImport } from './routes/login'

// Create Virtual Routes

const RegisterLazyImport = createFileRoute('/register')()
const ProductLazyImport = createFileRoute('/product')()
const EmailLazyImport = createFileRoute('/email')()
const IndexLazyImport = createFileRoute('/')()
const VendorVendorIdEvaluationFormLazyImport = createFileRoute(
  '/vendor/$vendorId/evaluation-form',
)()
const DashboardVendorVendorIdLazyImport = createFileRoute(
  '/dashboard/vendor/$vendorId',
)()

// Create/Update Routes

const RegisterLazyRoute = RegisterLazyImport.update({
  path: '/register',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/register.lazy').then((d) => d.Route))

const ProductLazyRoute = ProductLazyImport.update({
  path: '/product',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/product.lazy').then((d) => d.Route))

const EmailLazyRoute = EmailLazyImport.update({
  path: '/email',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/email.lazy').then((d) => d.Route))

const VendorRoute = VendorImport.update({
  path: '/vendor',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/vendor.lazy').then((d) => d.Route))

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const VendorVendorIdEvaluationFormLazyRoute =
  VendorVendorIdEvaluationFormLazyImport.update({
    path: '/vendor/$vendorId/evaluation-form',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/vendor_.$vendorId.evaluation-form.lazy').then(
      (d) => d.Route,
    ),
  )

const DashboardVendorVendorIdLazyRoute =
  DashboardVendorVendorIdLazyImport.update({
    path: '/dashboard/vendor/$vendorId',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/dashboard.vendor.$vendorId.lazy').then((d) => d.Route),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/vendor': {
      id: '/vendor'
      path: '/vendor'
      fullPath: '/vendor'
      preLoaderRoute: typeof VendorImport
      parentRoute: typeof rootRoute
    }
    '/email': {
      id: '/email'
      path: '/email'
      fullPath: '/email'
      preLoaderRoute: typeof EmailLazyImport
      parentRoute: typeof rootRoute
    }
    '/product': {
      id: '/product'
      path: '/product'
      fullPath: '/product'
      preLoaderRoute: typeof ProductLazyImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterLazyImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/vendor/$vendorId': {
      id: '/dashboard/vendor/$vendorId'
      path: '/dashboard/vendor/$vendorId'
      fullPath: '/dashboard/vendor/$vendorId'
      preLoaderRoute: typeof DashboardVendorVendorIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/vendor/$vendorId/evaluation-form': {
      id: '/vendor/$vendorId/evaluation-form'
      path: '/vendor/$vendorId/evaluation-form'
      fullPath: '/vendor/$vendorId/evaluation-form'
      preLoaderRoute: typeof VendorVendorIdEvaluationFormLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/login': typeof LoginRoute
  '/vendor': typeof VendorRoute
  '/email': typeof EmailLazyRoute
  '/product': typeof ProductLazyRoute
  '/register': typeof RegisterLazyRoute
  '/dashboard/vendor/$vendorId': typeof DashboardVendorVendorIdLazyRoute
  '/vendor/$vendorId/evaluation-form': typeof VendorVendorIdEvaluationFormLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/login': typeof LoginRoute
  '/vendor': typeof VendorRoute
  '/email': typeof EmailLazyRoute
  '/product': typeof ProductLazyRoute
  '/register': typeof RegisterLazyRoute
  '/dashboard/vendor/$vendorId': typeof DashboardVendorVendorIdLazyRoute
  '/vendor/$vendorId/evaluation-form': typeof VendorVendorIdEvaluationFormLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/login': typeof LoginRoute
  '/vendor': typeof VendorRoute
  '/email': typeof EmailLazyRoute
  '/product': typeof ProductLazyRoute
  '/register': typeof RegisterLazyRoute
  '/dashboard/vendor/$vendorId': typeof DashboardVendorVendorIdLazyRoute
  '/vendor/$vendorId/evaluation-form': typeof VendorVendorIdEvaluationFormLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/vendor'
    | '/email'
    | '/product'
    | '/register'
    | '/dashboard/vendor/$vendorId'
    | '/vendor/$vendorId/evaluation-form'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/vendor'
    | '/email'
    | '/product'
    | '/register'
    | '/dashboard/vendor/$vendorId'
    | '/vendor/$vendorId/evaluation-form'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/vendor'
    | '/email'
    | '/product'
    | '/register'
    | '/dashboard/vendor/$vendorId'
    | '/vendor/$vendorId/evaluation-form'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  LoginRoute: typeof LoginRoute
  VendorRoute: typeof VendorRoute
  EmailLazyRoute: typeof EmailLazyRoute
  ProductLazyRoute: typeof ProductLazyRoute
  RegisterLazyRoute: typeof RegisterLazyRoute
  DashboardVendorVendorIdLazyRoute: typeof DashboardVendorVendorIdLazyRoute
  VendorVendorIdEvaluationFormLazyRoute: typeof VendorVendorIdEvaluationFormLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  LoginRoute: LoginRoute,
  VendorRoute: VendorRoute,
  EmailLazyRoute: EmailLazyRoute,
  ProductLazyRoute: ProductLazyRoute,
  RegisterLazyRoute: RegisterLazyRoute,
  DashboardVendorVendorIdLazyRoute: DashboardVendorVendorIdLazyRoute,
  VendorVendorIdEvaluationFormLazyRoute: VendorVendorIdEvaluationFormLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login",
        "/vendor",
        "/email",
        "/product",
        "/register",
        "/dashboard/vendor/$vendorId",
        "/vendor/$vendorId/evaluation-form"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/vendor": {
      "filePath": "vendor.tsx"
    },
    "/email": {
      "filePath": "email.lazy.tsx"
    },
    "/product": {
      "filePath": "product.lazy.tsx"
    },
    "/register": {
      "filePath": "register.lazy.tsx"
    },
    "/dashboard/vendor/$vendorId": {
      "filePath": "dashboard.vendor.$vendorId.lazy.tsx"
    },
    "/vendor/$vendorId/evaluation-form": {
      "filePath": "vendor_.$vendorId.evaluation-form.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
